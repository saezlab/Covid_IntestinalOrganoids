dplyr::filter(gene_communities, Community == 12) %>% dplyr::pull(Gene)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(fgsea)
library(dplyr)
library(ggplot2)
library(piano)
library(tidyr)
library(ggsci)
library(igraph)
library(gprofiler2)
library(plotly)
## Function to extract the nodes that appear in CARNIVAL network and the
## background genes (all genes present in the prior knowledge network).
## It returns a list with two objects: the success and the background genes.
extractCARNIVALnodes <- function(CarnivalResults){
CarnivalNetwork <-
as.data.frame(CarnivalResults$weightedSIF, stringsAsFactors = FALSE)
colnames(CarnivalNetwork) <- c("source", "sign", "target", "Weight")
## We define the set of nodes interesting for our condition
sucesses <- unique(c(gsub("_.*","",CarnivalNetwork$source),
gsub("_.*","",CarnivalNetwork$target)))
CarnivalAttributes <- as.data.frame(CarnivalResults$nodesAttributes,
stringsAsFactors = FALSE)
## We define the background as all the genes in our prior knowledge network.
bg <- unique(gsub("_.*","",CarnivalAttributes$Node))
return(list(sucesses = sucesses, bg= bg))
}
### Function to print a barplot with the enriched pathways.
BarplotEnrichment <- function(PathwaysSelect, Interesting_pathways){
p <- ggplot(PathwaysSelect, aes(x = reorder(pathway, pvalue),
y = -log10(pvalue))) +
geom_bar(aes(fill = mean_stat), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1,
colour = ifelse(levels(reorder(PathwaysSelect$pathway,
PathwaysSelect$pvalue)) %in% Interesting_pathways,
"red", "grey40"),
face = ifelse(levels(reorder(PathwaysSelect$pathway,
PathwaysSelect$pvalue)) %in% Interesting_pathways,
"bold", "plain")),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("")
return(p)
}
carnival_results_inhibition <-
readRDS("Carnival_Results/carnival_results_top50tf_pleitropic_minsize15.rds")
nodes_carnival_inhibition <- extractCARNIVALnodes(carnival_results_inhibition)
carnival_results_activation <-
readRDS("Carnival_Results/carnival_results_top50tf_pleitropic_minsize15_activation.rds")
nodes_carnival_activation <- extractCARNIVALnodes(carnival_results_activation)
carnival_results_undefined <-
readRDS("Carnival_Results/carnival_results_top50tf_pleitropic_minsize15_undefinedEffect.rds")
nodes_carnival_undefined <- extractCARNIVALnodes(carnival_results_undefined)
Pathway_signatures <- loadGSC("InputData/c2.cp.v7.0.symbols.gmt")
DEA_results <- read_csv("InputData/Clevers_degs_all.csv") %>%
dplyr::select(Gene, stat)
mean_stat <- unlist(lapply(Pathway_signatures$gsc, function(x, DEA_results) {
genes_matching <- x[which(x %in% DEA_results$Gene)]
mean_genes <- dplyr::filter(DEA_results, Gene %in% genes_matching) %>%
dplyr::pull(stat) %>% mean(na.rm = TRUE)
return(mean_genes)
}, DEA_results = DEA_results)) %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "pathway") %>%
dplyr::rename(mean_stat = ".")
### Trying with Carnival node activity
carnival_avg_node_act <- carnival_results_inhibition$nodesAttributes %>%
as.data.frame() %>%
dplyr::mutate(AvgAct = as.numeric(AvgAct))
mean_stat_carni <-
unlist(lapply(Pathway_signatures$gsc, function(x, carnival_avg_node_act) {
genes_matching <- x[which(x %in% carnival_avg_node_act$Node)]
mean_genes <- dplyr::filter(carnival_avg_node_act, Node %in% genes_matching) %>%
dplyr::pull(AvgAct) %>% mean(na.rm = TRUE)
return(mean_genes)
}, carnival_avg_node_act = carnival_avg_node_act)) %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "pathway") %>%
dplyr::rename(mean_stat = ".")
hyper_results_inhibition <-
runGSAhyper(genes = nodes_carnival_inhibition$sucesses,
# pvalues = rep(0,length(nodes_carnival_inhibition$sucesses)),
pcutoff = 0.01,
universe = nodes_carnival_inhibition$bg, gsc = Pathway_signatures,
gsSizeLim = c(4,Inf), adjMethod = "fdr")
enriched_pathways_inhibition <- hyper_results_inhibition$resTab %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "pathway") %>%
as_tibble() %>%
dplyr::filter(`Adjusted p-value` <= 0.01) %>%
dplyr::inner_join(mean_stat) %>%
dplyr::select(pathway, `p-value`, `Adjusted p-value`, mean_stat) %>%
dplyr::rename(pvalue = `p-value`, AdjPvalu = `Adjusted p-value`) %>%
dplyr::mutate(pathway = as.factor(pathway))
interesting_pathways_inhibition <- c()
p_inhibition <- BarplotEnrichment(enriched_pathways_inhibition,
interesting_pathways_inhibition)
p_inhibition
hyper_results_activation <-
runGSAhyper(genes = nodes_carnival_activation$sucesses,
# pvalues = rep(0,length(nodes_carnival_activation$sucesses)),
pcutoff = 0.01,
universe = nodes_carnival_activation$bg, gsc = Pathway_signatures,
gsSizeLim = c(4,Inf), adjMethod = "fdr")
enriched_pathways_activation <- hyper_results_activation$resTab %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "pathway") %>%
as_tibble() %>%
dplyr::filter(`Adjusted p-value` <= 0.01) %>%
dplyr::inner_join(mean_stat) %>%
dplyr::select(pathway, `p-value`, `Adjusted p-value`, mean_stat) %>%
dplyr::rename(pvalue = `p-value`, AdjPvalu = `Adjusted p-value`) %>%
dplyr::mutate(pathway = as.factor(pathway))
interesting_pathways_activation <- c()
p_activation <- BarplotEnrichment(enriched_pathways_activation,
interesting_pathways_activation)
p_activation
hyper_results_undefined <-
runGSAhyper(genes = nodes_carnival_undefined$sucesses,
# pvalues = rep(0,length(nodes_carnival_activation$sucesses)),
pcutoff = 0.01,
universe = nodes_carnival_undefined$bg, gsc = Pathway_signatures,
gsSizeLim = c(4,Inf), adjMethod = "fdr")
enriched_pathways_undefined <- hyper_results_undefined$resTab %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "pathway") %>%
as_tibble() %>%
dplyr::filter(`Adjusted p-value` <= 0.0001) %>%
dplyr::inner_join(mean_stat) %>%
dplyr::select(pathway, `p-value`, `Adjusted p-value`, mean_stat) %>%
dplyr::rename(pvalue = `p-value`, AdjPvalu = `Adjusted p-value`) %>%
dplyr::mutate(pathway = as.factor(pathway))
interesting_pathways_undefined <- c()
p_undefined <- BarplotEnrichment(enriched_pathways_undefined,
interesting_pathways_undefined)
p_undefined
results_activation <-   hyper_results_activation$resTab %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "pathway") %>%
as_tibble() %>%
dplyr::mutate(LogpValue_activation = -log(`p-value`),
p_value_activation = `p-value`) %>%
dplyr::select(pathway, p_value_activation, LogpValue_activation)
results_inhibition <-   hyper_results_inhibition$resTab %>%
as.data.frame() %>%
tibble::rownames_to_column(var = "pathway") %>%
as_tibble() %>%
dplyr::mutate(LogpValue_inhibition = -log(`p-value`),
p_value_inhibition = `p-value`) %>%
dplyr::select(pathway, p_value_inhibition, LogpValue_inhibition)
results_join <-
dplyr::inner_join(results_activation, results_inhibition) %>%
dplyr::filter(p_value_activation < 0.05 | p_value_inhibition < 0.05) %>%
dplyr::mutate(diff = LogpValue_activation - LogpValue_inhibition) %>%
dplyr::top_n(15, wt = abs(diff)) %>%
dplyr::arrange(desc(abs(diff)))
results_join_longer <- results_join %>%
dplyr::select(pathway, diff, LogpValue_activation, LogpValue_inhibition) %>%
dplyr::rename(activation = "LogpValue_activation",
inhibition = "LogpValue_inhibition") %>%
pivot_longer(-c(pathway,diff), values_to = "LogPvalue",
names_to = "Interaction")
point_plot_activation_vs_inhibtion <-
ggplot(results_join_longer, aes(reorder(pathway, abs(diff)), LogPvalue)) +
geom_point(aes(color = Interaction), size = 3) +
coord_flip() +
theme_minimal() +
theme(legend.position = "bottom",  legend.justification = "center") +
scale_color_lancet() +
theme(axis.text.x = element_text(hjust = 1, size =8.5),
axis.text.y = element_text(size = 7),
panel.grid.minor = element_blank()) +
xlab("Pathways") + ylab("-Log (p-value)") +
geom_hline(yintercept = -log(0.05), linetype="dashed",
color = "#2F4F4F", size=0.5)
point_plot_activation_vs_inhibtion
carnival_results_igraph <- carnival_results_undefined$weightedSIF %>%
as.data.frame() %>% dplyr::select(-Sign) %>%
dplyr::rename(weight = "Weight") %>%
igraph::graph_from_data_frame(directed = FALSE)
c_edgeBetweeness <-
cluster_edge_betweenness(carnival_results_igraph)
c_FastGreedy <-
cluster_fast_greedy(carnival_results_igraph,
merges = TRUE,
modularity = TRUE,
membership = TRUE,
weights = E(carnival_results_igraph)$weight)
c_Infomap <-
cluster_infomap(carnival_results_igraph,
e.weights =  E(carnival_results_igraph)$weight,
v.weights = NULL, nb.trials = 10, modularity = TRUE)
c_labelProp <-
cluster_label_prop(carnival_results_igraph,
weights = E(carnival_results_igraph)$weight)
c_leadingEig <-
cluster_leading_eigen(carnival_results_igraph,
weights = E(carnival_results_igraph)$weight)
c_Louvain<-
cluster_louvain(carnival_results_igraph,
weights = E(carnival_results_igraph)$weight)
c_walktrap <-
cluster_walktrap(carnival_results_igraph,
weights = E(carnival_results_igraph)$weight,
steps = 4, merges = TRUE, modularity = TRUE, membership = TRUE)
modularity_df <- data.frame(method = c("EdgeBetweeness", "FastGreedy",
"Infomap","LabelPropagation","LeadingEigenvector", "Louvain","Walktrap"),
modularity = c(max(c_edgeBetweeness$modularity),
max(c_FastGreedy$modularity),
max(c_Infomap$modularity),
max(c_labelProp$modularity),
max(c_leadingEig$modularity),
max(c_Louvain$modularity),
max(c_walktrap$modularity))) %>%
dplyr::arrange(desc(modularity))
modularity_df
## Number of genes in the different communities.
table(c_FastGreedy$membership)
## We perform an Enrichment Analysis for each Community:
n <- length(unique(c_FastGreedy$membership))
gene_communities <-
data.frame(Gene = c_FastGreedy$names, Community = c_FastGreedy$membership)
p <- list()
for (i in seq_len(n)){
current_genes <- dplyr::filter(gene_communities, Community==i) %>%
dplyr::pull(Gene)
current_result <- gost(current_genes, user_threshold = 0.01,
correction_method = "fdr", custom_bg = nodes_carnival_undefined$bg,
sources = c("GO","KEGG","REAC","WP"))
if (!is.null(current_result)){
#currentfile <-
#    paste0("02_analysis_carnival_results_files/figure-gfm/enrichment_cluster_", i, ".png")
p[[i]] <- gostplot(current_result, capped = FALSE, interactive = TRUE)
}
}
dplyr::filter(gene_communities, Community == 11) %>% dplyr::pull(Gene)
dplyr::filter(gene_communities, Community == 9) %>% dplyr::pull(Gene)
getwd()
setwd("/home/alvaldeolias/Documents/GitHub/Saezlab/Covid_IntestinalOrganoids/")
render("02_analysis_carnival_results.Rmd", "html_document")
rmarkdown::render("02_analysis_carnival_results.Rmd", "html_document")
